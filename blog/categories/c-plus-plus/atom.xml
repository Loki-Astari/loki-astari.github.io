<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C++ | Loki Astari]]></title>
  <link href="http://lokiastari.com/blog/categories/c-plus-plus/atom.xml" rel="self"/>
  <link href="http://lokiastari.com/"/>
  <updated>2016-06-06T01:05:36-07:00</updated>
  <id>http://lokiastari.com/</id>
  <author>
    <name><![CDATA[Loki Astari]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Socket Protocols]]></title>
    <link href="http://lokiastari.com/blog/2016/05/29/socket-protocols/"/>
    <updated>2016-05-29T21:13:39-07:00</updated>
    <id>http://lokiastari.com/blog/2016/05/29/socket-protocols</id>
    <content type="html"><![CDATA[<p>In the previous articles I have used a very simplistic protocol. In real world situations this simple protocol is not sufficient. To provide a more robust connection between client and server a communications protocol is required so that we can validate messages are sent correctly and generate appropriate responses that can also be validated.</p>

<p>Designing a communication protocol is a non trivial task and personally I would look for an existing protocol that matches your use case rather than trying to create protocol from scratch.</p>

<h4>Example Protocols</h4>

<ul>
<li>HTTP&#x003A; &nbsp;<a href="https://tools.ietf.org/html/rfc2616.txt">https://tools.ietf.org/html/rfc2616.txt</a></li>
<li>IRC&#x003A; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://tools.ietf.org/html/rfc1490.txt">https://tools.ietf.org/html/rfc1490.txt</a></li>
</ul>


<p>Rather than go through all the different protocols I am simply going to pick the HTTP(S) protocol and use that for further discussion. HTTP(S) is relatively well known; It is simple to implement the basics; There are well known server implementations that support it; There are well known client libraries that can be used in application development.</p>

<h4>Example HTTP(S) servers</h4>

<ul>
<li><a href="https://httpd.apache.org/">Apache</a></li>
<li><a href="http://nginx.org/en/">nginx</a></li>
<li><a href="https://nodejs.org/en/about/">Node.js</a></li>
</ul>


<h4>Client Side HTTP Libraries</h4>

<ul>
<li><a href="https://curl.haxx.se/libcurl/c/">LibCurl</a></li>
<li><a href="https://www.w3.org/Library/User/Using/">Libwww</a></li>
<li><a href="http://http-fetcher.sourceforge.net/API/index.html">HttpFetch</a></li>
</ul>


<h2>HTTP(S)</h2>

<p>Basically HTTP(S) defines two object. A request object is sent from the client to the server and response object is sent back as a result of a request. The only difference between the two is the start-line. Both HTTP objects can be broken down into three pieces.</p>

<ol>
<li>Start-Line</li>
<li>Header-Section</li>
<li>Body</li>
</ol>


<h3>Start-Line</h3>

<p>For a request object this is:</p>

<table>
<tr><td>&#8226;&nbsp;</td><td style="width:300px">Method:</td><td>HEAD/GET/PUT/POST/DELETE</td></tr>
<tr><td>&#8226;&nbsp;</td><td style="width:300px">Space:</td><td>One Space character</td></tr>
<tr><td>&#8226;&nbsp;</td><td style="width:300px">URL:</td><td>Identification of the object/service needed</td></tr>
<tr><td>&#8226;&nbsp;</td><td style="width:300px">Space:</td><td>One Space character</td></tr>
<tr><td>&#8226;&nbsp;</td><td style="width:300px">HTTP-Version:</td><td>Usually HTTP/1.1</td></tr>
<tr><td>&#8226;&nbsp;</td><td style="width:300px">CR/LF:</td><td>Literally '\r\n'</td></tr>
</table>


<h4>Example:</h4>

<p><code>http
GET http://google.com/maps?id=456 HTTP/1.1\r\n
</code></p>

<p>For a response object this is:</p>

<table>
<tr><td>&#8226;&nbsp;</td><td style="width:300px">HTTP-Version:</td><td>Usually HTTP/1.1</td></tr>
<tr><td>&#8226;&nbsp;</td><td style="width:300px">Space:</td><td>One Space character</td></tr>
<tr><td>&#8226;&nbsp;</td><td style="width:300px">Response Code:</td><td><a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">100->599</a></td></tr>
<tr><td>&#8226;&nbsp;</td><td style="width:300px">Space:</td><td>One Space character</td></tr>
<tr><td>&#8226;&nbsp;</td><td style="width:300px">Human Readable Response:</td><td>Human readable explanation of the response code</td></tr>
<tr><td>&#8226;&nbsp;</td><td style="width:300px">CR/LF:</td><td>Literally '\r\n'zz</td></tr>
</table>


<h4>Example:</h4>

<p><code>http
HTTP/1.1 200 OK\r\n
</code></p>

<h3>Header-Section</h3>

<p>This is a set of key/value pairs one per line separated by a colon. Each Line is terminated by CR/LF and the end of the header section is marked by an empty line.</p>

<table>
<tr><td>&#8226;&nbsp;</td><td style="width:300px">Key:</td><td>A text string representing the keys.</td></tr>
<tr><td>&#8226;&nbsp;</td><td style="width:300px">Colon:</td><td>A single colon (note: some implementations are lax and insert a space before the colon).</td></tr>
<tr><td>&#8226;&nbsp;</td><td style="width:300px">Space:</td><td>One Space character (note: some implementations are lax and more then one space may be present)</td></tr>
<tr><td>&#8226;&nbsp;</td><td style="width:300px">Value:</td><td>A set of characters that does not include CR or LF.</td></tr>
<tr><td>&#8226;&nbsp;</td><td style="width:300px">CR/LF:</td><td>Literally '\r\n'</td></tr>
</table>


<h4>Example</h4>

<p><code>http
Content-Length: 42\r\n
Content-Type: text/text\r\n
</code></p>

<h3>Body</h3>

<p>The payload of the object should be in the body. Its size is defined by the headers defined in <a href="https://tools.ietf.org/html/rfc2616#section-4.4">rfc-2616 section 4.4 Message Length</a>.</p>

<h3>Required Headers</h3>

<p>According to the rfc(s) <a href="https://tools.ietf.org/html/rfc7230">7230</a>, <a href="https://tools.ietf.org/html/rfc7231">7231</a>, <a href="https://tools.ietf.org/html/rfc7232">7232</a>, <a href="https://tools.ietf.org/html/rfc7233">7233</a>, <a href="https://tools.ietf.org/html/rfc7234">7234</a> or <a href="https://tools.ietf.org/html/rfc7235">7235</a> there are no header fields there are actually required header fields.</p>

<h4>Request Object</h4>

<p>But real world implementations need some headers to work efficiently, so you probably should send the following headers when making a request to a server:</p>

<ul>
<li><a href="https://tools.ietf.org/html/rfc7231#section-3.1.1.5">Content-Type</a>:</li>
<li><a href="https://tools.ietf.org/html/rfc7230#section-3.3.2">Content-Length</a>:   // Or use one of the other techniques to specify length</li>
<li><a href="https://tools.ietf.org/html/rfc7230#section-5.4">Host</a>:</li>
</ul>


<p>It is also polite to send the following.</p>

<ul>
<li><a href="https://tools.ietf.org/html/rfc7231#section-5.5.3">User-Agent</a>:</li>
<li><a href="https://tools.ietf.org/html/rfc7231#section-5.3.2">Accept</a>:</li>
</ul>


<h4>Response Object</h4>

<p>A server implementation &ldquo;Must&rdquo; send a <code>Date:</code> header field if it is a reasonable approximation of UTC. But that means servers may not supply the <code>Date:</code> field so you can&rsquo;t say it is a requirement of the standard. But you will usually see the following headers returned from a server:</p>

<ul>
<li><a href="https://tools.ietf.org/html/rfc7231#section-7.1.1.2">Date</a>:</li>
<li><a href="https://tools.ietf.org/html/rfc7231#section-7.4.2">Server</a>:</li>
<li><a href="https://tools.ietf.org/html/rfc7230#section-3.3.2">Content-Length</a>:</li>
<li><a href="https://tools.ietf.org/html/rfc7231#section-3.1.1.5">Content-Type</a>:</li>
</ul>


<h2>Implementation</h2>

<p>Given this very basic protocol; it seems like the implementation of these requirements should be quite trivial. To be honest the implementation of creating the objects to send is relatively trivial, the hard part is reading objects from the stream in an efficiently and correctly validated manner. You can find my attempt <a href="https://github.com/Loki-Astari/Examples/tree/master/Version3">here</a>: It works but its 500 lines long and only covers the most basics parts of the protocol and does not do any of the hard parts (like authentication or HTTPS).</p>

<p>To use this protocol correctly you really need to use one of the existing libraries. Here I have re-implemented the client using libcurl.</p>

<p>```cpp Client uses libcurl wrapper <a href="https://github.com/Loki-Astari/Examples/blob/master/Version4/client.cpp">https://github.com/Loki-Astari/Examples/blob/master/Version4/client.cpp</a> source</p>

<p>int main(int argc, char* argv[])
{</p>

<pre><code>namespace Sock = ThorsAnvil::Socket;
if (argc != 3)
{
    std::cerr &lt;&lt; "Usage: client &lt;host&gt; &lt;Message&gt;\n";
    std::exit(1);
}

Sock::CurlGlobal    curlInit;
Sock::CurlConnector connect(argv[1], 8080);

connect.sendMessage("/message", argv[2]);

std::string message;
connect.recvMessage(message);
std::cout &lt;&lt; message &lt;&lt; "\n";
</code></pre>

<p>}
```</p>

<p>```cpp libCurl simple wrapper <a href="https://github.com/Loki-Astari/Examples/blob/master/Version4/client.cpp">https://github.com/Loki-Astari/Examples/blob/master/Version4/client.cpp</a> source</p>

<h1>include &lt;curl/curl.h></h1>

<h1>include <sstream></h1>

<h1>include <iostream></h1>

<h1>include <cstdlib></h1>

<p>namespace ThorsAnvil
{</p>

<pre><code>namespace Socket
{
</code></pre>

<p>template&lt;std::size_t I = 0, typename&hellip; Args>
int print(std::ostream&amp; s, Args&hellip; args)
{</p>

<pre><code>using Expander = int[];
return Expander{ 0, ((s &lt;&lt; std::forward&lt;Args&gt;(args)), 0)...}[0];
</code></pre>

<p>}</p>

<p>template&lt;typename&hellip; Args>
std::string buildErrorMessage(Args const&amp;&hellip; args)
{</p>

<pre><code>std::stringstream msg;
print(msg, args...);
return msg.str();
</code></pre>

<p>}</p>

<p>class CurlGlobal
{</p>

<pre><code>public:
    CurlGlobal()
    {
        if (curl_global_init(CURL_GLOBAL_ALL) != 0)
        {
            throw std::runtime_error(buildErrorMessage("CurlGlobal::", __func__, ": curl_global_init: fail"));
        }
    }
    ~CurlGlobal()
    {
        curl_global_cleanup();
    }
</code></pre>

<p>};</p>

<p>extern &ldquo;C&rdquo; size_t curlConnectorGetData(char <em>ptr, size_t size, size_t nmemb, void </em>userdata);</p>

<p>enum RequestType {Get, Head, Put, Post, Delete};
class CurlConnector
{</p>

<pre><code>CURL*       curl;
std::string host;
int         port;
std::string response;

friend size_t curlConnectorGetData(char *ptr, size_t size, size_t nmemb, void *userdata);
std::size_t getData(char *ptr, size_t size)
{
    response.append(ptr, size);
    return size;
}


public:
    CurlConnector(std::string const&amp; host, int port)
        : curl(curl_easy_init( ))
        , host(host)
        , port(port)
    {
        if (curl == NULL)
        {
            throw std::runtime_error(buildErrorMessage("CurlConnector::", __func__, ": curl_easy_init: fail"));
        }
    }
    ~CurlConnector()
    {
        curl_easy_cleanup(curl);
    }

    virtual RequestType getRequestType() const {return Post;}

    void sendMessage(std::string const&amp; urlPath, std::string const&amp; message)
    {
        std::stringstream url;
        response.clear();
        url &lt;&lt; "http://" &lt;&lt; host;
        if (port != 80)
        {
            url &lt;&lt; ":" &lt;&lt; port;
        }
        url &lt;&lt; urlPath;

        CURLcode res;
        auto sListDeleter = [](struct curl_slist* headers){curl_slist_free_all(headers);};
        std::unique_ptr&lt;struct curl_slist, decltype(sListDeleter)&gt; headers(nullptr, sListDeleter);
        headers = std::unique_ptr&lt;struct curl_slist, decltype(sListDeleter)&gt;(curl_slist_append(headers.get(), "Content-Type: text/text"), sListDeleter);

        if ((res = curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers.get())) != CURLE_OK)
        {
            throw std::runtime_error(buildErrorMessage("CurlConnector::", __func__, ": curl_easy_setopt CURLOPT_HTTPHEADER:", curl_easy_strerror(res)));
        }
        if ((res = curl_easy_setopt(curl, CURLOPT_ACCEPT_ENCODING, "*/*")) != CURLE_OK)
        {
            throw std::runtime_error(buildErrorMessage("CurlConnector::", __func__, ": curl_easy_setopt CURLOPT_ACCEPT_ENCODING:", curl_easy_strerror(res)));
        }
        if ((res = curl_easy_setopt(curl, CURLOPT_USERAGENT, "ThorsExperimental-Client/0.1")) != CURLE_OK)
        {
            throw std::runtime_error(buildErrorMessage("CurlConnector::", __func__, ": curl_easy_setopt CURLOPT_USERAGENT:", curl_easy_strerror(res)));
        }
        if ((res = curl_easy_setopt(curl, CURLOPT_URL, url.str().c_str())) != CURLE_OK)
        {
            throw std::runtime_error(buildErrorMessage("CurlConnector::", __func__, ": curl_easy_setopt CURLOPT_URL:", curl_easy_strerror(res)));
        }
        if ((res = curl_easy_setopt(curl, CURLOPT_POSTFIELDSIZE, message.size())) != CURLE_OK)
        {
            throw std::runtime_error(buildErrorMessage("CurlConnector::", __func__, ": curl_easy_setopt CURLOPT_POSTFIELDSIZE:", curl_easy_strerror(res)));
        }
        if ((res = curl_easy_setopt(curl, CURLOPT_COPYPOSTFIELDS, message.data())) != CURLE_OK)
        {
            throw std::runtime_error(buildErrorMessage("CurlConnector::", __func__, ": curl_easy_setopt CURLOPT_COPYPOSTFIELDS:", curl_easy_strerror(res)));
        }
        if ((res = curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, curlConnectorGetData)) != CURLE_OK)
        {
            throw std::runtime_error(buildErrorMessage("CurlConnector::", __func__, ": curl_easy_setopt CURLOPT_WRITEFUNCTION:", curl_easy_strerror(res)));
        }
        if ((res = curl_easy_setopt(curl, CURLOPT_WRITEDATA, this)) != CURLE_OK)
        {
            throw std::runtime_error(buildErrorMessage("CurlConnector::", __func__, ": curl_easy_setopt CURLOPT_WRITEDATA:", curl_easy_strerror(res)));
        }


        switch(getRequestType())
        {
            case Get:       res = CURLE_OK; /* The default is GET. So do nothing.*/         break;
            case Head:      res = curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, "HEAD");    break;
            case Put:       res = curl_easy_setopt(curl, CURLOPT_PUT, 1);                   break;
            case Post:      res = curl_easy_setopt(curl, CURLOPT_POST, 1);                  break;
            case Delete:    res = curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, "DELETE");  break;
            default:
                throw std::domain_error(buildErrorMessage("CurlConnector::", __func__, ": invalid method: ", static_cast&lt;int&gt;(getRequestType())));
        }
        if (res != CURLE_OK)
        {
            throw std::runtime_error(buildErrorMessage("CurlConnector::", __func__, ": curl_easy_setopt CURL_METHOD:", curl_easy_strerror(res)));
        }
        if ((res = curl_easy_perform(curl)) != CURLE_OK)
        {
            throw std::runtime_error(buildErrorMessage("CurlConnector::", __func__, ": curl_easy_perform:", curl_easy_strerror(res)));
        }
    }
    void recvMessage(std::string&amp; message)
    {
        message = std::move(response);
    }
</code></pre>

<p>};</p>

<p>size_t curlConnectorGetData(char <em>ptr, size_t size, size_t nmemb, void </em>userdata)
{</p>

<pre><code>CurlConnector*  self = reinterpret_cast&lt;CurlConnector*&gt;(userdata);
return self-&gt;getData(ptr, size * nmemb);
</code></pre>

<p>}</p>

<pre><code>}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++ Wrapper for Socket]]></title>
    <link href="http://lokiastari.com/blog/2016/05/26/c-plus-plus-wrapper-for-socket/"/>
    <updated>2016-05-26T21:13:39-07:00</updated>
    <id>http://lokiastari.com/blog/2016/05/26/c-plus-plus-wrapper-for-socket</id>
    <content type="html"><![CDATA[<p>The last two articles examined the &ldquo;C Socket&rdquo; interface that is provided by OS. In this article I wrap this functionality in a very simple C++ class to provide guaranteed closing and apply a consistent exception strategy. The first step is to rewrite the client/server code with all the low level socket code removed. This will help identify the interface that the wrapper class needs to implement.</p>

<p>The client code becomes really trivial. Create a <code>ConnectSocket</code> specifying host and a port. Then use the <code>putMessage()</code> and <code>getMessage()</code> to communicate with the server. Note: I am continuing to use the trivial protocol that was defined in the last article: <code>putMessage()</code> writes a string to the socket then closes the connection; <code>getMessage()</code> reads a socket until it is closed by the other end (I will cover more sophisticated protocols in a subsequent article).</p>

<p>```cpp client.cpp <a href="https://github.com/Loki-Astari/Examples/blob/master/Version2/client.cpp">https://github.com/Loki-Astari/Examples/blob/master/Version2/client.cpp</a> source</p>

<pre><code>ConnectSocket    connect("localhost", 8080);          // Connect to a server
ProtocolSimple   connectSimple(connect);              // Knows how to send/recv a message over a socket
connectSimple.sendMessage("", "A test message going to the server");

std::string message;
connectSimple.recvMessage(message);
std::cout &lt;&lt; message &lt;&lt; "\n";
</code></pre>

<p>```</p>

<p>For the server end this nearly as trivial as the client. Create a <code>ServerSocket</code> and wait for incoming connections from clients. When we get a connection we return a <code>SocketData</code> object. The reason for returning a new Socket like object is that this mimics the behavior of the underlying <code>::accept()</code> call which opens a new port for the client to interact with the server on. The additional benefit of separating this from the <code>ServerSocket</code> is that a subsequent version may allow multiple connections and we want to be able to interact with each connection independently without sharing state, potentially across threads, so modelling it with an object makes sense in an OO world.</p>

<p>```cpp server.cpp <a href="https://github.com/Loki-Astari/Examples/blob/master/Version2/server.cpp">https://github.com/Loki-Astari/Examples/blob/master/Version2/server.cpp</a> source</p>

<pre><code>ServerSocket   server(8080);                          // Create a lisening connection
while(true)
{
    DataSocket      accept  = server.accept();            // Wait for a clinet to connect
    ProtocolSimple  acceptSimple(accept);                 // Knows how to send/recv a message over a socket

    std::string message;
    acceptSimple.recvMessage(message);
    std::cout &lt;&lt; message &lt;&lt; "\n";

    acceptSimple.sendMessage("", "OK");
}
</code></pre>

<p>```</p>

<p>Surprisingly this actually gives us three types of socket interface (not the two most people expect).</p>

<ul>
<li>The ServerSocket class has no ability to read/write just accept connections</li>
<li>The ConnectSocket class connects and can be used to read/write</li>
<li>The DataSocket class is an already connected socket that can be used to read/write</li>
</ul>


<p>Since a socket is a resource that we don&rsquo;t want duplicated. So this is a resource that can be moved but not copied.</p>

<p>This lets me to define a very simple interface like this:</p>

<p>```cpp Socket.h <a href="https://github.com/Loki-Astari/Examples/blob/master/Version2/Socket.h">https://github.com/Loki-Astari/Examples/blob/master/Version2/Socket.h</a> source
// An RAII base class for handling sockets.
// Socket is movable but not copyable.
class BaseSocket
{</p>

<pre><code>int     socketId;
protected:
    // Designed to be a base class not used used directly.
    BaseSocket(int socketId);
    int getSocketId() const {return socketId;}
public:
    ~BaseSocket();

    // Moveable but not Copyable
    BaseSocket(BaseSocket&amp;&amp; move)               noexcept;
    BaseSocket&amp; operator=(BaseSocket&amp;&amp; move)    noexcept;
    void swap(BaseSocket&amp; other)                noexcept;
    BaseSocket(BaseSocket const&amp;)               = delete;
    BaseSocket&amp; operator=(BaseSocket const&amp;)    = delete;

    // User can manually call close
    void close();
</code></pre>

<p>};</p>

<p>// A class that can read/write to a socket
class DataSocket: public BaseSocket
{</p>

<pre><code>public:
    DataSocket(int socketId);

    bool getMessage(std::string&amp; message);
    void putMessage(std::string const&amp; message);
    void putMessageClose();
</code></pre>

<p>};</p>

<p>// A class the conects to a remote machine
// Allows read/write accesses to the remote machine
class ConnectSocket: public DataSocket
{</p>

<pre><code>public:
    ConnectSocket(std::string const&amp; host, int port);
</code></pre>

<p>};</p>

<p>// A server socket that listens on a port for a connection
class ServerSocket: public BaseSocket
{</p>

<pre><code>public:
    ServerSocket(int port);

    // An accepts waits for a connection and returns a socket
    // object that can be used by the client for communication
    DataSocket accept();
</code></pre>

<p>};
```
Taking the existing code and wrapping this interface around it becomes trivial. The code full code is provided <a href="https://github.com/Loki-Astari/Examples/tree/master/Version2">here</a>.</p>

<p>In the previous article I talked about the different types of errors that could be generated by read/write. In the following code I take this a step further. Since the code is wrapped inside a class and thus can control the socket resources more cleanly it feels more natural to use exceptions rather than error codes, consequentially error codes are not leaked across any public API boundary.</p>

<ol>
<li>domain_error

<ul>
<li>This is caused by an error that theoretically can not happen (since we have full control of the class). If this type of error occurs there is a bug in the socket code or there has been massive data corruption. Consequently you should not be trying to catch these type of exception as there is a fundamental bug in the code. It is better to let the application exit as it is likely there is substantial corruption of any data.</li>
</ul>
</li>
<li>logic_error

<ul>
<li>This is caused by an error that theoretically can not happen if the class is used correctly. This means that calling code has some form of logic error. It is caused by calling any method on a socket object that was previously closed or moved. Again this type of error should not be caught (but can be). You should try and remove all potential for this type of error by good unit tests.</li>
</ul>
</li>
<li>runtime_error:

<ul>
<li>This is caused by an unlikely situation that can not be handled by the Socket code. This type of error requires a broader context to be resolved. As result the socket code will throw an exception that the user can catch and potentially correct from.</li>
</ul>
</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Socket Read/Write]]></title>
    <link href="http://lokiastari.com/blog/2016/04/09/socket-read/"/>
    <updated>2016-04-09T21:11:25-07:00</updated>
    <id>http://lokiastari.com/blog/2016/04/09/socket-read</id>
    <content type="html"><![CDATA[<h2>Checking read/write success</h2>

<p>The <code>read()</code> and <code>write()</code> command can fail in a couple of ways but can also succeed without reading/writing all the data, a common mistake is not to check the amount of data read/written from/to a stream. Interestingly not all error condition are fatal and reading/writing can potentially be resumed after an error.</p>

<h2>Read</h2>

<p>To understand if you have read all the information that is available on a stream you need to define a communication protocol (like HTTP). For the first version of this server the protocol is very simple. Messages are passed as strings (not null terminated) and the end of the message is marked by closing the write stream. Thus a client can send one message and receive one reply with each connection it makes.</p>

<p>```c getMessage()
/<em>
 * Returns:     0   EOM reached.
 *                  The message is complete. There is no more data to be read.
 *              >0  Message data has been read (and a null terminator added).
 *                  The value is the number of bytes read from the stream
 *                  You should call getMessage() again to get the next section of the message.
 *                  Note: the message is terminated when 0 is returned.
 *              -1  An error occured.
 </em>/
int getMessage(int socketId, char* buffer, std::ssize_t size)
{</p>

<pre><code>std::ssize_t     dataRead = 0;
std::ssize_t     dataMax  = size - 1;

while(dataRead &lt; dataMax)
{
    ssize_t get = read(socketId, buffer + dataRead, size - dataRead);
    if (get == -1)
    {
        return -1;
    }
    if (get == 0)
    {
        break;
    }
    dataRead += get;
}
buffer[dataRead] = '\0';
return dataRead;
</code></pre>

<p>}
```</p>

<h3>Read Errors</h3>

<p>This initial version treats all <code>read()</code> errors as unrecoverable and <code>getMessage()</code> return an error state. But not all error codes need to result in a failure. So in this section I will go through some of the error codes and give some potentially actions. In a subsequent articles I may revise these actions as we cover more complex ways of interacting with sockets.</p>

<p>The following errors are the result of programming bugs and should not happen in production.</p>

<pre><code>[EBADF]            fildes is not a valid file or socket descriptor open for reading.
[EFAULT]           Buf points outside the allocated address space.
[EINVAL]           The pointer associated with fildes was negative.
[ENXIO]            A requested action cannot be performed by the device.
</code></pre>

<p>If they do happen in production there is no way to correct for them pragmatically because the error has happened in another part of the code unassociated with this function.</p>

<p>One could argue that because these should never happen the application can abort, but for now we will settle for the read operation aborting with an error code. If we wrap this in a C++ class to control the state of the socket then exceptions may be more appropriate and we will look into that approach in a subsequent article.</p>

<p>The following errors are potentially recoverable from.</p>

<!-- http://stackoverflow.com/questions/8471577/linux-tcp-connect-failure-with-etimedout -->


<pre><code>[EIO]              An I/O error occurred while reading from the file system.
[ENOBUFS]          An attempt to allocate a memory buffer fails.
[ENOMEM]           Insufficient memory is available.
[ETIMEDOUT]        A transmission timeout occurs during a read attempt on a socket.
</code></pre>

<p>But in reality recovering from them within the context of a read operation is not practical (you need to recover from these operations at a point were resource are controlled or user interaction is possible). So for now we will abort the read operation with an error code (we will revisit this in a later article).</p>

<p>The following error codes means that no more data will be available because the connection has been interrupted.</p>

<!-- http://stackoverflow.com/questions/2974021/what-does-econnreset-mean-in-the-context-of-an-af-local-socket -->


<!-- http://stackoverflow.com/questions/900042/what-causes-the-enotconn-error -->


<pre><code>[ECONNRESET]       The connection is closed by the peer during a read attempt on a socket.
[ENOTCONN]         A read is attempted on an unconnected socket.
</code></pre>

<p>How the application reacts to a broken connection depends on the communication protocol. For the simple protocol defined above we can return any data that has been retrieved from the socket and then indicating to the calling code that we have reached the end of the message (we will revisit this in a later article). This is probably the most iffy decision in handling error codes and returning an error code could be more appropriate but I want to illustrate that we can potentially continue depending on the situation.</p>

<p>The following error codes are recoverable from.</p>

<pre><code>[EAGAIN]           The file was marked for non-blocking I/O, and no data were ready to be read.
</code></pre>

<p>These error codes are generated when you have a non-blocking stream. In a future article we will discuss how to take advantage of non-blocking streams.</p>

<pre><code>[EINTR]            A read from a slow device was interrupted before any data arrived by the delivery of a signal.
</code></pre>

<p>The exact action that you take will depend on your application (like doing some useful work) but for our simple application simply re-trying the read operation will be the standard action. Again we will come back to this, but taking advantage of timeouts will require a slightly more sophisticated approach rather than using the sockets API directly.</p>

<blockquote><p><strong>EINTR:</strong><br/>
An important note about signals. There are a lot of signals that are non leathal and will result in this EINTR error code. But one should note that leathal signals like SIGINT by default will kill the application and thus will not cause this error code (as the call to read() will never return).</p>

<p>But you can override the SIGINT signal handler and a allow your application to continue and at this point your read operation will recieve this error. How your code interacts with signals like SIGINT is beyond the scope of this article and it will be discussed just like other signals.</p></blockquote>

<p>```c getMessage() Improved
/<em>
 * Returns:     0   EOM reached.
 *                  There is no data in the buffer.
 *              >0  Message data has been read.
 *                  If the buffer is full then it is not null terminated.
 *                  If the buffer is partially full then it is null terminated
 *                  and the next call to get getMessage() will return 0.
 *              &lt;0  An error occured.
 </em>/
int getMessage(int socketId, char* buffer, std::ssize_t size)
{</p>

<pre><code>std::ssize_t     dataRead = 0;
std::ssize_t     dataMax  = size - 1;

while(dataRead &lt; dataMax)
{
    ssize_t get = read(socketId, buffer + dataRead, size - dataRead);
    if (get == -1)
    {
        switch(errno)
        {
            case EBADF:
            case EFAULT:
            case EINVAL:
            case ENXIO:
                // Fatal error. Programming bug
                return -3;
            case EIO:
            case ENOBUFS:
            case ENOMEM:
                // Resource aquisition failure or device error
                // Can't recover from here so indicate failure
                // and exit
                return -2;
            case ETIMEDOUT:
            case EAGAIN:
            case EINTR:
                // Temporrary error.
                // Simply retry the read.
                continue;
            case ECONNRESET:
            case ENOTCONN:
                // Connection broken.
                // Return the data we have available and exit
                // as if the connection was closed correctly.
                get = 0;
                break;
            default:
                return -1;
        }
    }
    if (get == 0)
    {
        break;
    }
    dataRead += get;
}
buffer[dataRead] = '\0';
return dataRead;
</code></pre>

<p>}
```</p>

<h2>Write</h2>

<p>The <code>write()</code> has exactly the same scenario as <code>read()</code>.</p>

<p>The following errors are the reuls of programming bugs and should not happen in production.</p>

<pre><code> [EINVAL]           The pointer associated with fildes is negative.
 [EBADF]            fildes is not a valid file descriptor open for writing.
 [ECONNRESET]       A write is attempted on a socket that is not connected.
 [ENXIO]            A request is made of a nonexistent device, or the request is outside the capabilities of the device.
 [EPIPE]            An attempt is made to write to a socket of type SOCK_STREAM that is not connected to a peer socket.
</code></pre>

<p>The following errors are potentially recoverable bugs. Though recovering from them requires some form of awarness of the context that is not provided at the read level. So we must generate an error to stop reading and allow the caller to sort out the problem.</p>

<pre><code> [EDQUOT]           The user's quota of disk blocks on the file system containing the file is exhausted.
 [EFBIG]            An attempt is made to write a file that exceeds the process's file size limit or the maximum file size.
 [EIO]              An I/O error occurs while reading from or writing to the file system.
 [ENETDOWN]         A write is attempted on a socket and the local network interface used to reach the destination is down.
 [ENETUNREACH]      A write is attempted on a socket and no route to the network is present.
 [ENOSPC]           There is no free space remaining on the file system containing the file.
</code></pre>

<p>The following error codes are recoverable from and we covered them above in the section on <code>read()</code>.</p>

<pre><code> [EAGAIN]           The file is marked for non-blocking I/O, and no data could be written immediately.
 [EINTR]            A signal interrupts the write before it could be completed.
</code></pre>

<p>The resulting put function then looks like this.</p>

<p>```c putMessage() Improved
/<em>
 * Returns:
 *              >0  Indicates success and the number of bytes written.
 *              &lt;0  Indicates failure.
 </em>/
int putMessage(int socketId, char* buffer, ssize_t size)
{</p>

<pre><code>ssize_t     dataWritten = 0;

while(dataWritten &lt; size)
{
    ssize_t put = write(socketId, buffer + dataWritten, size - dataWritten);
    if (put == -1)
    {
        switch(errno)
        {
            case EINVAL:
            case EBADF:
            case ECONNRESET:
            case ENXIO:
            case EPIPE:
                // Fatal error. Programming bug
                return -3;
            case EDQUOT:
            case EFBIG:
            case EIO:
            case ENETDOWN:
            case ENETUNREACH:
            case ENOSPC:
                // Resource aquisition failure or device error
                // Can't recover from here so indicate failure
                // and exit
                return -2;
            case EAGAIN:
            case EINTR:
                // Temporrary error.
                // Simply retry the read.
                continue;
            default:
                return -1;
        }
    }
    dataWritten += put;
}
return dataWritten;
</code></pre>

<p>}
```</p>

<h1>Summary</h1>

<p>This article has shown the most important error that people skip over when reading and writing to a socket: <strong>Not all the data was transported at the same time</strong>. The read and write command may only read/write a portion of the data that you wanted to send/receive and thus you must check the amount that actually was sent/received.</p>

<p>The next most important point is that not all error codes are fatal (most people actually check these) <strong>but</strong> an interrupt (EINTR) can be relatively common and you can continue reading after it has happened.</p>

<h1>Inspiration</h1>

<ul>
<li>2015-Jun-25 <a href="http://codereview.stackexchange.com/q/94608/507">Impromptu TCP sender/receiver</a></li>
<li>2015-Jul-03 <a href="http://codereview.stackexchange.com/q/95638/507">Raw Text TCP Client v3</a></li>
<li>2015-Dec-20 <a href="http://codereview.stackexchange.com/q/114551/507">Server / client desynchronisation of messages </a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Socket Programming in C]]></title>
    <link href="http://lokiastari.com/blog/2016/04/08/socket-programming-in-c-version-1/"/>
    <updated>2016-04-08T09:47:01-07:00</updated>
    <id>http://lokiastari.com/blog/2016/04/08/socket-programming-in-c-version-1</id>
    <content type="html"><![CDATA[<p>Building a simple client/server application is the common first internet based applications developers attempt. These applications are built on top of the socket communication library, but socket programming in C++ is not obvious as there are no standard libraries and thus you have to fall back to the C API. The closest &ldquo;standardish&rdquo; sort of thing we have is <a href="http://www.boost.org/doc/libs/1_60_0/doc/html/boost_asio/overview.html">Boost.asio</a> which is at the other end of the spectrum in terms of API and involves a cognitive leap to understand what is happening underneath (or you can just trust the library maintainers). The other alternative is <a href="https://curl.haxx.se/libcurl/c/">libcurl</a>; the &ldquo;easy curl&rdquo; layer is an abstraction of the <code>socket()</code> API, while the &ldquo;multi curl&rdquo; layer is an abstraction of the <code>pselect()</code> API that allows multiple sockets to be handled in a single thread.</p>

<p>I am writing a series of articles that start with a basic C++ client/server application and walk through building a C++ communication library. During this processes I will be using examples from <a href="http://codereview.stackexchange.com">codereview.stackexchange.com</a> to illustrate common mistakes and try to show how to write the code correctly (This will also be a learning exercise for me so please let me know if you spot a mistake).</p>

<p>Currently the plan is to write the following articles:</p>

<!-- Server listening for program sockets -->


<ul>
<li>Client/Server C</li>
<li>Client/Server C Read/Write</li>
<li>Client/Server C++ Wrapper</li>
<li>Mult-Threaded Server</li>
<li>Non-Blocking Socket</li>
<li>Co-Routines</li>
</ul>


<h2>Client/Server C++ Basic Version</h2>

<p>The minimum example of a working Client/Server application in C++:<br/>
The full working version is <a href="https://github.com/Loki-Astari/Examples/tree/master/Version1">here</a></p>

<p>```c   C Server <a href="https://github.com/Loki-Astari/Examples/blob/master/Version1/server.cpp">https://github.com/Loki-Astari/Examples/blob/master/Version1/server.cpp</a> source</p>

<h1>include &lt;netinet/in.h></h1>

<h1>include &lt;errno.h></h1>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;string.h></h1>

<h1>include &lt;unistd.h></h1>

<h1>define SERVER_BUFFER_SIZE      1024</h1>

<p>int main()
{</p>

<pre><code>int socketId = socket(PF_INET, SOCK_STREAM, 0);

struct sockaddr_in serverAddr;
bzero((char*)&amp;serverAddr, sizeof(serverAddr));
serverAddr.sin_family       = AF_INET;
serverAddr.sin_port         = htons(8080);
serverAddr.sin_addr.s_addr  = INADDR_ANY;
bind(socketId, (struct sockaddr *) &amp;serverAddr, sizeof(serverAddr));

listen(socketId, 5);

int                         finished    = 0;
while(!finished)
{
    struct  sockaddr_storage    serverStorage;
    socklen_t                   addr_size   = sizeof serverStorage;
    int newSocket = accept(socketId, (struct sockaddr*)&amp;serverStorage, &amp;addr_size);

    char        buffer[SERVER_BUFFER_SIZE];
    int         get = read(newSocket, buffer, SERVER_BUFFER_SIZE - 1);

    buffer[get] = '\0';
    fprintf(stdout, "%s\n", buffer);

    write(newSocket, "OK", 2);

    fprintf(stdout, "Message Complete\n");

    close(newSocket);
}
close(socketId);
</code></pre>

<p>}
```</p>

<p>```c C Client <a href="https://github.com/Loki-Astari/Examples/blob/master/Version1/client.cpp">https://github.com/Loki-Astari/Examples/blob/master/Version1/client.cpp</a> source</p>

<h1>include &lt;arpa/inet.h></h1>

<h1>include &lt;errno.h></h1>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;string.h></h1>

<h1>include &lt;unistd.h></h1>

<h1>define CLIENT_BUFFER_SIZE     1024</h1>

<p>int main(int argc, char* argv[])
{</p>

<pre><code>if (argc != 3)
{
    fprintf(stderr, "Usage: client &lt;host&gt; &lt;Message&gt;\n");
    exit(1);
}

int socketId = socket(PF_INET, SOCK_STREAM, 0);

struct sockaddr_in serverAddr;
socklen_t addrSize = sizeof(serverAddr);
bzero((char*)&amp;serverAddr, sizeof(serverAddr));
serverAddr.sin_family       = AF_INET;
serverAddr.sin_port         = htons(8080);
serverAddr.sin_addr.s_addr  = inet_addr(argv[1]);
connect(socketId, (struct sockaddr*)&amp;serverAddr, addrSize);

write(socketId, argv[2], strlen(argv[2]));

shutdown(socketId, SHUT_WR);

char    buffer[CLIENT_BUFFER_SIZE];
size_t  get = read(socketId, buffer, CLIENT_BUFFER_SIZE - 1);

buffer[get] = '\0';
fprintf(stdout, "%s %s\n", "Response from server", buffer);

close(socketId);
</code></pre>

<p>}
```</p>

<p>This version of the Client/Server actually works (a lot of the time) but obviously has a couple of major issues.</p>

<h2>Checking Error Codes</h2>

<p>If the calls to <code>socket()</code>, <code>bind()</code>, <code>listen()</code> or <code>connect()</code> fail then we have a catastrophic error any further actions will also fail. A few of the error codes generated by these functions can potentially be recovered from but most are programming error or permission failure as a result a human readable message with application termination is an acceptable solution (at this point).</p>

<p>Note: When these functions don&rsquo;t succeed they set the global variable <code>errno</code> which can be translated into a human readable string with <code>strerror()</code>. So the simplest solution is to generate an appropriate error message for the user and terminate the application.</p>

<p>```c Socket Validation</p>

<pre><code>int socketId = socket(PF_INET, SOCK_STREAM, 0);
if (socketId == -1)
{
    fprintf(stderr, "Failed: socket()\n%s\n", strerror());
    exit(1);
}
</code></pre>

<p>```</p>

<p>```c Bind Validation</p>

<pre><code>if (bind(socketId, (struct sockaddr *) &amp;serverAddr, sizeof(serverAddr)) == -1)
{
    fprintf(stderr, "Failed: bind()\n%s\n", strerror());
    close(socketId);    // Don't forget to close the socket.
    exit(1);
}
</code></pre>

<p>```</p>

<p>```c Listen Validation</p>

<pre><code>if (listen(socketId, 5) == -1)
{
    fprintf(stderr, "Failed: connect()\n%s\n", strerror());
    close(socketId);    // Don't forget to close the socket.
    exit(1);
}
</code></pre>

<p>```</p>

<p>```c Connect Validation</p>

<pre><code>if (connect(socketId, (struct sockaddr*)&amp;serverAddr, addrSize) == -1)
{
    fprintf(stderr, "Failed: connect()\n%s\n", strerror());
    close(socketId);    // Don't forget to close the socket.
    exit(1);
}
</code></pre>

<p>```</p>

<h1>Summary</h1>

<p>The basic socket programs are relatively trivial. But this version 1 has some obvious flaws the major one being checking error states (which a lot of beginners forget in their first version). The next article will look into some more details about read and write operations on the socket.</p>

<h1>Inspiration for Article</h1>

<ul>
<li>2012-Jul-09 <a href="http://codereview.stackexchange.com/q/13461/507">Two-way communication in TCP: server-client implementation</a></li>
<li>2012-Jul-23 <a href="http://codereview.stackexchange.com/q/13933/507">Stupidly simple TCP client/server</a></li>
<li>2013-May-28 <a href="http://codereview.stackexchange.com/q/26683/507">How is this for a “Hello World” of socket programming?</a></li>
<li>2013-Sep-06 <a href="http://codereview.stackexchange.com/q/30852/507">Extract location from HTTP socket</a></li>
<li>2014-Mar-10 <a href="http://codereview.stackexchange.com/q/43914/507">Client/server implementation in C (sending data/files)</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memory Resizing]]></title>
    <link href="http://lokiastari.com/blog/2016/03/25/resizemaths/"/>
    <updated>2016-03-25T05:53:07-07:00</updated>
    <id>http://lokiastari.com/blog/2016/03/25/resizemaths</id>
    <content type="html"><![CDATA[<p>So I never really considered why the resize of vector used a constant expansion of 1.5 or 2 (in some popular implementations). That was until I did my previous article series <a href="/blog/2016/02/27/vector/">&ldquo;Vector&rdquo;</a> where I concentrated a lot on resource management and did a section on <a href="/blog/2016/03/12/vector-resize/">resizing the vector</a>. Originally in the code I tried to be clever, a mistake. I used a resize value of 1.62 (an approximation of <code>Phi</code>), because I vaguely remembered reading an article that this was the optimum resize factor. When I put this out for code review it was pointed out to me that this value was too large, the optimum value must be less than or equal to <code>Phi</code> (1.6180339887) and that exceeding this limit actually made things a lot worse.</p>

<p>So I had to know why&hellip;.</p>

<p>So the theory goes: You have a memory resource of size <code>B</code>. If you resize this resource by a constant factor <code>r</code> by re-allocating a new block then releasing the old block. Then if the value of <code>r</code> is smaller than or equal to <code>Phi</code> you will eventually be able to reuse memory that has previously been released; otherwise the new block of memory being allocated will always be larger than the previously released memory.</p>

<p>So I thought lets try that:<br/>
Test one <code>r &gt; Phi</code>:</p>

<pre><code>B=10
r=2.0

            Sum Memory      Memory      Memory Needed       Difference
             Released     Allocated     Next Iteration
Start            0            10              20                 20
Resize 1        10            20              40                 30
Resize 2        30            40              80                 50
Resize 3        70            80             160                 90
Resize 4       150           160             320                170
</code></pre>

<p>OK. That seems to be holding (at least in the short term). Lo lets try a smaller value.<br/>
Test two <code>r &lt; Phi</code>:</p>

<pre><code>B=10
r=1.5

            Sum Memory      Memory      Memory Needed       Difference
             Released     Allocated     Next Iteration
Start            0            10              15                 15
Resize 1        10            15              22                 12
Resize 2        25            22              33                  8
Resize 3        47            33              48                  1
Resize 4        80            48              72                 -8 // Reuse released memory next iteration
</code></pre>

<p>OK. That also seems to be holding. But can we show that holds for all values of B? Also this is a bit anecdotal can we actually show this relationship actually hold? Time to break out some maths (not math as my American cousins seem to insist on for the shortening of mathematics).</p>

<p>So the size <code>S</code> of any block after <code>n</code> resize operations will be:</p>

<p><p><div class='bogus-wrapper'><notextile></p>

<pre><code>\[ S   = Br^n \]
</code></pre>

<p></notextile></div></p></p>

<p>Thus the size of <code>Released Memory</code> can be expressed as:</p>

<p><p><div class='bogus-wrapper'><notextile></p>

<pre><code>\[ \sum_{k=0}^{n-1}\ Br^k \]
</code></pre>

<p></notextile></div></p></p>

<p>Also the size of the next block will be:</p>

<p><p><div class='bogus-wrapper'><notextile></p>

<pre><code>\[ Br^{n+1} \]
</code></pre>

<p></notextile></div></p></p>

<p>So if the amount of <code>Released Memory</code> >= the amount required for the next block, then we can reuse the <code>Released Memory</code>.</p>

<p><p><div class='bogus-wrapper'><notextile></p>

<pre><code>\[ \sum_{k=0}^{n-1}\ Br^k &amp;gt;= Br^{n+1} \]

\[ B \sum_{k=0}^{n-1}\ r^k &amp;gt;= Br^{n+1} \]

\[ \sum_{k=0}^{n-1}\ r^k &amp;gt;= r^{n+1} \]

\[ {1-r^{(n-1)+1}\over1-r} &amp;gt;= r^{n+1} \]

\[ {1-r^n\over1-r} &amp;gt;= r^{n+1} \]

\[ 1-r^n &amp;gt;= r^{n+1} (1-r) \]

\[ 1-r^n &amp;gt;= r^{n+1} - r^{n+2} \]

\[ 1 + r^{n+2} - r^{n+1} - r^n &amp;gt;= 0 \]

\[ 1 + r^n (r^2 - r - 1) &amp;gt;= 0 \]
</code></pre>

<p></notextile></div></p></p>

<p>This is were my maths broke down and I had to plot some graphs (my old &ldquo;maths&rdquo; teacher would have been so proud).<br></p>

<p><img src="/images/Root4.png" width="400" height="200" title="&ldquo;n=4&rdquo;" >
<img src="/images/Root8.png" width="400" height="200" title="&ldquo;n=8&rdquo;" ></p>

<br><br>


<p>So after looking at the graphs (to undrestand the formula) then talking to some smart people.<br/>
They noticed that:
<p><div class='bogus-wrapper'><notextile></p>

<pre><code>\[ (r^2 - r - 1) root . when . r = \Phi \]
</code></pre>

<p></notextile></div></p></p>

<p>We find that the first root of the equation is 1. The second root of the equation depends on <code>n</code>, as <code>n</code> tends to <code>infinity</code> the other root tends towards <code>Phi</code>. From this we can infer the following:</p>

<p><p><div class='bogus-wrapper'><notextile></p>

<pre><code>\[
    1 &amp;lt; r &amp;lt= \Phi
\]
</code></pre>

<p></notextile></div></p></p>

<p>Thus if <code>r</code> remains in the above range then the above theory holds.</p>
]]></content>
  </entry>
  
</feed>
