<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C++-By-Example | Loki Astari]]></title>
  <link href="http://lokiastari.com/blog/categories/c-plus-plus-by-example/atom.xml" rel="self"/>
  <link href="http://lokiastari.com/"/>
  <updated>2016-05-25T09:19:20-07:00</updated>
  <id>http://lokiastari.com/</id>
  <author>
    <name><![CDATA[Loki Astari]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Socket Class]]></title>
    <link href="http://lokiastari.com/blog/2016/04/24/socketcpp/"/>
    <updated>2016-04-24T21:13:39-07:00</updated>
    <id>http://lokiastari.com/blog/2016/04/24/socketcpp</id>
    <content type="html"><![CDATA[<p>So in the</p>

<p>```</p>

<h1>ifndef THORSANVIL_SOCKET_H</h1>

<h1>define THORSANVIL_SOCKET_H</h1>

<h1>include <string></h1>

<h1>include <sstream></h1>

<p>namespace ThorsAnvil
{</p>

<pre><code>namespace Socket
{
</code></pre>

<p>template&lt;std::size_t I = 0, typename&hellip; Tp>
inline typename std::enable_if<I == sizeof...(Tp), void>::type
print(std::ostream&amp; s, std::tuple&lt;Tp&hellip;> const&amp; t)
{ }</p>

<p>template&lt;std::size_t I = 0, typename&hellip; Tp>
inline typename std::enable_if<I < sizeof...(Tp), void>::type
print(std::ostream&amp; s, std::tuple&lt;Tp&hellip;> const&amp; t)
{</p>

<pre><code>s &lt;&lt; std::get&lt;I&gt;(t);
print&lt;I + 1, Tp...&gt;(s, t);
</code></pre>

<p>}</p>

<p>template&lt;typename&hellip; Args>
std::string buildErrorMessage(Args const&amp;&hellip; args)
{</p>

<pre><code>std::stringstream msg;
print(msg, std::make_tuple(args...));
return msg.str();
</code></pre>

<p>}</p>

<p>class SocketBase
{</p>

<pre><code>protected:
    int     socketId;
public:
    SocketBase(int socketId);
    ~SocketBase();

    SocketBase(SocketBase&amp;&amp; move)               noexcept;
    SocketBase&amp; operator=(SocketBase&amp;&amp; move)    noexcept;
    void swap(SocketBase&amp; other)                noexcept;
    SocketBase(SocketBase const&amp;)               = delete;
    SocketBase&amp; operator=(SocketBase const&amp;)    = delete;

    void close();
</code></pre>

<p>};</p>

<p>class SocketData: public SocketBase
{</p>

<pre><code>public:
    using SocketBase::SocketBase;

    bool getMessage(std::string&amp; message, bool resize = false);
    void putMessage(std::string const&amp; message);
</code></pre>

<p>};</p>

<p>class ConnectSocket: public SocketData
{</p>

<pre><code>public:
    ConnectSocket(std::string const&amp; host, int port);
</code></pre>

<p>};</p>

<p>class ServerSocket: public SocketBase
{</p>

<pre><code>public:
    ServerSocket(int port);

    SocketData accept();
</code></pre>

<p>};</p>

<pre><code>}
</code></pre>

<p>}</p>

<h1>endif</h1>

<p>```</p>

<p>```</p>

<h1>include &ldquo;Socket.h&rdquo;</h1>

<h1>include &lt;arpa/inet.h></h1>

<h1>include &lt;sys/types.h></h1>

<h1>include &lt;sys/socket.h></h1>

<h1>include &lt;unistd.h></h1>

<h1>include <sstream></h1>

<h1>include <stdexcept></h1>

<p>using namespace ThorsAnvil::Socket;</p>

<p>SocketBase::SocketBase(int socketId)</p>

<pre><code>: socketId(socketId)
</code></pre>

<p>{</p>

<pre><code>//std::cerr &lt;&lt; "SocketBase(" &lt;&lt; socketId &lt;&lt; ")\n";
if (socketId == -1)
{
    throw std::runtime_error(buildErrorMessage("SocketBase::SocketBase: bad socket: ", strerror(errno)));
}
</code></pre>

<p>}</p>

<p>SocketBase::~SocketBase()
{</p>

<pre><code>close();
</code></pre>

<p>}</p>

<p>void SocketBase::close()
{</p>

<pre><code>socketId = 0;   
::close(socketId);
</code></pre>

<p>}</p>

<p>void SocketBase::swap(SocketBase&amp; other) noexcept
{</p>

<pre><code>using std::swap;
swap(socketId,   other.socketId);
</code></pre>

<p>}</p>

<p>SocketBase::SocketBase(SocketBase&amp;&amp; move) noexcept</p>

<pre><code>: socketId(0)
</code></pre>

<p>{</p>

<pre><code>move.swap(*this);
</code></pre>

<p>}</p>

<p>SocketBase&amp; SocketBase::operator=(SocketBase&amp;&amp; move) noexcept
{</p>

<pre><code>move.swap(*this);
return *this;
</code></pre>

<p>}</p>

<p>ConnectSocket::ConnectSocket(std::string const&amp; host, int port)</p>

<pre><code>: SocketData(::socket(PF_INET, SOCK_STREAM, 0))
</code></pre>

<p>{</p>

<pre><code>struct sockaddr_in serverAddr;
bzero((char*)&amp;serverAddr, sizeof(serverAddr));
serverAddr.sin_family       = AF_INET;
serverAddr.sin_port         = htons(port);
serverAddr.sin_addr.s_addr  = inet_addr(host.c_str());

if (::connect(socketId, (struct sockaddr*)&amp;serverAddr, sizeof(serverAddr)) != 0)
{
    close();
    throw std::runtime_error(buildErrorMessage("ConnectSocket::ConnectSocket: connect: ", strerror(errno)));
}
</code></pre>

<p>}</p>

<p>ServerSocket::ServerSocket(int port)</p>

<pre><code>: SocketBase(::socket(PF_INET, SOCK_STREAM, 0))
</code></pre>

<p>{</p>

<pre><code>struct sockaddr_in serverAddr;
bzero((char*)&amp;serverAddr, sizeof(serverAddr));
serverAddr.sin_family       = AF_INET;
serverAddr.sin_port         = htons(port);
serverAddr.sin_addr.s_addr  = INADDR_ANY;

if (::bind(socketId, (struct sockaddr *) &amp;serverAddr, sizeof(serverAddr)) != 0)
{
    close();
    throw std::runtime_error(buildErrorMessage("ServerSocket::ServerSocket: bind: ", strerror(errno)));
}

if (::listen(socketId, 5) != 0)
{
    close();
    throw std::runtime_error(buildErrorMessage("ServerSocket::ServerSocket: listen: ", strerror(errno)));
}
</code></pre>

<p>}</p>

<p>SocketData ServerSocket::accept()
{</p>

<pre><code>struct  sockaddr_storage    serverStorage;
socklen_t                   addr_size   = sizeof serverStorage;
int newSocket = ::accept(socketId, (struct sockaddr*)&amp;serverStorage, &amp;addr_size);
if (newSocket == -1)
{
    throw std::runtime_error(buildErrorMessage("ServerSocket:accept: accept: ", strerror(errno)));
}
return SocketData(newSocket);
</code></pre>

<p>}</p>

<p>class StringSizer
{</p>

<pre><code>std::string&amp;    stringData;
std::size_t&amp;    currentSize;
public:
    StringSizer(std::string&amp; stringData, std::size_t&amp; currentSize)
        : stringData(stringData)
        , currentSize(currentSize)
    {
        stringData.resize(stringData.capacity());
    }
    ~StringSizer()
    {
        stringData.resize(currentSize);
    }
    void incrementSize(std::size_t amount)
    {
        currentSize += amount;
    }
</code></pre>

<p>};</p>

<p>bool SocketData::getMessage(std::string&amp; message, bool resize)
{</p>

<pre><code>//std::cerr &lt;&lt; "Getting Message\n";
std::size_t     dataRead = 0;

do
{
    StringSizer        stringSizer(message, dataRead);
    std::size_t const  capacity = message.capacity();
    std::size_t const  dataMax  = capacity - 1;
    char*              buffer   = &amp;message[0];

    while(dataRead &lt; dataMax)
    {
        std::size_t get = read(socketId, buffer + dataRead, dataMax - dataRead);
        //std::cerr &lt;&lt; " read: " &lt;&lt; get &lt;&lt; "\n";
        if (get == -1)
        {
            switch(errno)
            {
                case EBADF:
                case EFAULT:
                case EINVAL:
                case ENXIO:
                {
                    // Fatal error. Programming bug
                    throw std::domain_error(buildErrorMessage("SocketData::getMessage: read: critical error: ", strerror(errno)));
                }
                case EIO:
                case ENOBUFS:
                case ENOMEM:
                {
                   // Resource acquisition failure or device error
                    throw std::runtime_error(buildErrorMessage("SocketData::getMessage: read: resource failure: ", strerror(errno)));
                }
                case ETIMEDOUT:
                case EAGAIN:
                case EINTR:
                {
                    // Temporrary error.
                    // Simply retry the read.
                    continue;
                }
                case ECONNRESET:
                case ENOTCONN:
                {
                    // Connection broken.
                    // Return the data we have available and exit
                    // as if the connection was closed correctly.
                    get = 0;
                    break;
                }
                default:
                {
                    throw std::runtime_error(buildErrorMessage("SocketData::getMessage: read: returned -1: ", strerror(errno)));
                }
            }
        }
        if (get == 0)
        {
            return dataRead &gt; 0;
        }
        dataRead += get;
        stringSizer.incrementSize(get);
    }
    if (resize)
    {
        message.reserve(message.capacity() * 1.5);
    }
}
while(resize);
return true;
</code></pre>

<p>}</p>

<p>void SocketData::putMessage(std::string const&amp; message)
{</p>

<pre><code>char const*     buffer      = &amp;message[0];
std::size_t     size        = message.size();
std::size_t     dataWritten = 0;

while(dataWritten &lt; size)
{
    std::size_t put = write(socketId, buffer + dataWritten, size - dataWritten);
    if (put == -1)
    {
        switch(errno)
        {
            case EINVAL:
            case EBADF:
            case ECONNRESET:
            case ENXIO:
            case EPIPE:
            {
                // Fatal error. Programming bug
                throw std::domain_error(buildErrorMessage("SocketData::putMessage: write: critical error: ", strerror(errno)));
            }
            case EDQUOT:
            case EFBIG:
            case EIO:
            case ENETDOWN:
            case ENETUNREACH:
            case ENOSPC:
            {
                // Resource acquisition failure or device error
                throw std::runtime_error(buildErrorMessage("SocketData::putMessage: write: resource failure: ", strerror(errno)));
            }
            case EAGAIN:
            case EINTR:
            {
                // Temporrary error.
                // Simply retry the read.
                continue;
            }
            default:
            {
                throw std::runtime_error(buildErrorMessage("SocketData::putMessage: write: returned -1: ", strerror(errno)));
            }
        }
    }
    dataWritten += put;
}
::shutdown(socketId, SHUT_WR);
return;
</code></pre>

<p>}
```</p>

<p>```</p>

<h1>include &ldquo;Socket.h&rdquo;</h1>

<h1>include <iostream></h1>

<p>namespace Sock = ThorsAnvil::Socket;</p>

<p>int main()
{</p>

<pre><code>Sock::ServerSocket   server(8080);
int                  finished    = 0;
while(!finished)
{
    Sock::SocketData  accept  = server.accept();

    std::string message;
    while(accept.getMessage(message))
    {
        std::cout &lt;&lt; message;
    }
    std::cout &lt;&lt; "\n";

    accept.putMessage("OK");
}
</code></pre>

<p>}
```</p>

<p>```</p>

<h1>include &ldquo;Socket.h&rdquo;</h1>

<h1>include <cstdlib></h1>

<h1>include <iostream></h1>

<p>namespace Sock = ThorsAnvil::Socket;</p>

<p>int main(int argc, char* argv[])
{</p>

<pre><code>if (argc != 3)
{
    std::cerr &lt;&lt; "Usage: client &lt;host&gt; &lt;Message&gt;\n";
    std::exit(1);
}

Sock::ConnectSocket    connect(argv[1], 8080);
connect.putMessage(argv[2]);

std::string message;
while(connect.getMessage(message))
{
    std::cout &lt;&lt; message;
}
std::cout &lt;&lt; "\n";
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Socket Programming in C Version 2]]></title>
    <link href="http://lokiastari.com/blog/2016/04/11/socket-programming-in-c-version-2/"/>
    <updated>2016-04-11T21:27:01-07:00</updated>
    <id>http://lokiastari.com/blog/2016/04/11/socket-programming-in-c-version-2</id>
    <content type="html"><![CDATA[<h1>C Server</h1>

<p>You can also see all the requests for review for <a href="#SourceC">C version on codereview.stackexchange.com</a>.</p>

<p>Building a client/server application is a common first internet based applications that C developers build. There are many examples out there on the web most of the examples are in C. You can also see all the requests for review for <a href="#SourceC">C version on codereview.stackexchange.com</a>. A lot of people have taken these C version and tried to convert them verbatim to C++ reviews for <a href="#SourceCpp">C++ version on codereview.stackexchange.com</a>.</p>

<p>Note: You can find a fully working version of this code <a href="https://github.com/Loki-Astari/Examples/tree/master/ClientServerCExample">here</a>:</p>

<p>```cpp  C Server</p>

<h1>include &ldquo;common.h&rdquo;</h1>

<h1>include &lt;netinet/in.h></h1>

<h1>include &lt;errno.h></h1>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;string.h></h1>

<h1>include &lt;unistd.h></h1>

<h1>define SERVER_BUFFER_SIZE     1024</h1>

<p>int main()
{</p>

<pre><code>int socketId = serverSocket();
if (socketId == -1)
{
    fprintf(stderr, "%s\n%s\n", socketError, strerror(errno));
    exit(1);
}
int                         finished    = 0;
while(!finished)
{
    struct  sockaddr_storage    serverStorage;
    socklen_t                   addr_size   = sizeof serverStorage;
    int newSocket = accept(socketId, (struct sockaddr*)&amp;serverStorage, &amp;addr_size);
    if (newSocket == -1)
    {
        fprintf(stderr, "Failed: accept()\n%s\n", strerror(errno));
        close(socketId);
        exit(1);
    }

    static char const*  fullBufferFormat = "%." QUOTE(SERVER_BUFFER_SIZE) "s";
    static char const*  endBufferFormat  = "%s\n";

    int         get;
    char        buffer[SERVER_BUFFER_SIZE];
    while((get = getMessage(newSocket, buffer, SERVER_BUFFER_SIZE)) &gt; 0)
    {
        char const* format = get == 0 ? endBufferFormat : fullBufferFormat;
        fprintf(stdout, format, buffer);
    }

    char const* msg     = get == 0 ? "OK" : "ERROR";
    if (sendMessage(newSocket, msg, strlen(msg) + 1) != 0)
    {
        fprintf(stderr, "Failed: sendMessage\n%s\n", strerror(errno));
        close(newSocket);
        close(socketId);
        exit(1);
    }
    fprintf(stdout, "Message Complete\n");

    close(newSocket);
}
close(socketId);
</code></pre>

<p>}
```</p>

<p>```cpp C Client</p>

<h1>include &ldquo;common.h&rdquo;</h1>

<h1>include &lt;arpa/inet.h></h1>

<h1>include &lt;errno.h></h1>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;string.h></h1>

<h1>include &lt;unistd.h></h1>

<h1>define CLIENT_BUFFER_SIZE     1024</h1>

<p>int main(int argc, char* argv[])
{</p>

<pre><code>if (argc != 3)
{
    fprintf(stderr, "Usage: client &lt;host&gt; &lt;Message&gt;\n");
    exit(1);
}

int socketId = clientSocket(argv[1]);
if (socketId == -1)
{
    fprintf(stderr, "%s\n%s\n", socketError, strerror(errno));
    exit(1);
}

if (sendMessage(socketId, argv[2], strlen(argv[2]) + 1) != 0)
{
    fprintf(stderr, "Failed: sendMessage()\n%s\n", strerror(errno));
    close(socketId);
    exit(1);
}
if (shutdown(socketId, SHUT_WR) != 0)
{
    fprintf(stderr, "Failed: shutdown()\n%s\n", strerror(errno));
    close(socketId);
    exit(1);
}

static char const*  fullBufferFormat = "%s %." QUOTE(CLIENT_BUFFER_SIZE) "s";
static char const*  endBufferFormat  = "%s %s\n";

int     get;
char    buffer[CLIENT_BUFFER_SIZE];
while((get = getMessage(socketId, buffer, CLIENT_BUFFER_SIZE)) &gt; 0)
{
    char const* format = get == 0 ? endBufferFormat : fullBufferFormat;
    fprintf(stdout, format, "Response from server", buffer);
}

if (get == -1)
{
    fprintf(stderr, "Failed: getMessage()\n%s\n", strerror(errno));
}

close(socketId);
</code></pre>

<p>}
```
You will notice the extensive code used in error checking and reporting used in C code.</p>

<p>The main advantages, for me, in C++ code is RAII and exceptions. Rewriting the above code using a <code>Socket</code> class to handle resource management and exceptions to provide an error propagation system. These simple changes result in a 20% code reduction and in my opinion make the code is easier to read (I have tried to be fair and provide a fair comparison but I am definitely biased).</p>

<p>Note: You can find a fully working version of this code <a href="https://github.com/Loki-Astari/Examples/tree/master/Socket">here</a>:</p>

<p>A lot of people have taken these C version and tried to convert them verbatim to C++ reviews for <a href="#SourceCpp">C++ version on codereview.stackexchange.com</a>.</p>

<p>```cpp C++ Server</p>

<h1>include &ldquo;common.h&rdquo;</h1>

<h1>include <iostream></h1>

<h1>include <sstream></h1>

<h1>include <cstdint></h1>

<p>int main()
{</p>

<pre><code>static std::string okMsg    = "OK";
static std::string errorMsg = "ERROR";
try
{
    Server  server;
    int                         finished    = 0;
    while(!finished)
    {
        Socket      connection = server.accept();

        std::string buffer;
        bool    ok = false;
        if (connection.getMessage(buffer))
        {
            std::cout &lt;&lt; buffer &lt;&lt; "\n"
                      &lt;&lt; "Message Complete\n";
            ok = true;
        }

        if (!connection.sendMessage(ok ? okMsg : errorMsg))
        {
            std::cerr &lt;&lt; "Send Message Failed\n" &lt;&lt; strerror(errno) &lt;&lt; "\n";
        }
    }
}
catch(std::exception const&amp; e)
{
    std::cerr &lt;&lt; "Exception: " &lt;&lt; e.what() &lt;&lt; "\n";
    throw;
}
</code></pre>

<p>}
```</p>

<p>```cpp C++ Client</p>

<h1>include &ldquo;common.h&rdquo;</h1>

<h1>include <iostream></h1>

<h1>include <sstream></h1>

<h1>include <cstdint></h1>

<h1>define CLIENT_BUFFER_SIZE     1024</h1>

<p>int main(int argc, char* argv[])
{</p>

<pre><code>if (argc != 3)
{
    std::cerr &lt;&lt; "Usage: client &lt;host&gt; &lt;Message&gt;\n";
    exit(1);
}

try
{
    Client  client(argv[1]);

    if (!client.sendMessage(argv[2]))
    {
        std::stringstream message("Failed: sendMessage()\n");
        message &lt;&lt; strerror(errno);
        throw std::runtime_error(message.str());
    }

    std::string     buffer;
    if (client.getMessage(buffer))
    {
        std::cout &lt;&lt; "Response from server: " &lt;&lt; buffer &lt;&lt; "\n";
    }
}
catch(std::exception const&amp; e)
{
    std::cerr &lt;&lt; "Exception: " &lt;&lt; e.what() &lt;&lt; "\n";
    throw;
}
</code></pre>

<p>}
```</p>

<h2>Mimicking the C interface</h2>

<pre><code>void                            SocketCreate();
void                            SocketBind();
void                            SocketListen();
static void*                    SocketAccept(void*);
static void*                    SocketRead(void*);
</code></pre>

<h2>Curl Wrapper.</h2>

<ul>
<li>2012-Aug-06 <a href="http://codereview.stackexchange.com/q/14389/507">Tiny Curl C++ wrapper</a></li>
</ul>


<p>Stuff to Write</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Socket Read/Write]]></title>
    <link href="http://lokiastari.com/blog/2016/04/09/socket-read/"/>
    <updated>2016-04-09T21:11:25-07:00</updated>
    <id>http://lokiastari.com/blog/2016/04/09/socket-read</id>
    <content type="html"><![CDATA[<h2>Checking read/write success</h2>

<p>The <code>read()</code> and <code>write()</code> command can fail in a couple of ways but can also succeed without reading/writing all the data, a common mistake is not to check the amount of data read/written from/to a stream. Interestingly not all error condition are fatal and reading/writing can potentially be resumed after an error.</p>

<h2>Read</h2>

<p>To understand if you have read all the information that is available on a stream you need to define a communication protocol (like HTTP). For the first version of this server the protocol is very simple. Messages are passed as strings (not null terminated) and the end of the message is marked by closing the write stream. Thus a client can send one message and receive one reply with each connection it makes.</p>

<p>```c getMessage()
/<em>
 * Returns:     0   EOM reached.
 *                  The message is complete. There is no more data to be read.
 *              >0  Message data has been read (and a null terminator added).
 *                  The value is the number of bytes read from the stream
 *                  You should call getMessage() again to get the next section of the message.
 *                  Note: the message is terminated when 0 is returned.
 *              -1  An error occured.
 </em>/
int getMessage(int socketId, char* buffer, std::ssize_t size)
{</p>

<pre><code>std::ssize_t     dataRead = 0;
std::ssize_t     dataMax  = size - 1;

while(dataRead &lt; dataMax)
{
    ssize_t get = read(socketId, buffer + dataRead, size - dataRead);
    if (get == -1)
    {
        return -1;
    }
    if (get == 0)
    {
        break;
    }
    dataRead += get;
}
buffer[dataRead] = '\0';
return dataRead;
</code></pre>

<p>}
```</p>

<h3>Read Errors</h3>

<p>This initial version treats all <code>read()</code> errors as unrecoverable and <code>getMessage()</code> return an error state. But not all error codes need to result in a failure. So in this section I will go through some of the error codes and give some potentially actions. In a subsequent articles I may revise these actions as we cover more complex ways of interacting with sockets.</p>

<p>The following errors are the result of programming bugs and should not happen in production.</p>

<pre><code>[EBADF]            fildes is not a valid file or socket descriptor open for reading.
[EFAULT]           Buf points outside the allocated address space.
[EINVAL]           The pointer associated with fildes was negative.
[ENXIO]            A requested action cannot be performed by the device.
</code></pre>

<p>If they do happen in production there is no way to correct for them pragmatically because the error has happened in another part of the code unassociated with this function.</p>

<p>One could argue that because these should never happen the application can abort, but for now we will settle for the read operation aborting with an error code. If we wrap this in a C++ class to control the state of the socket then exceptions may be more appropriate and we will look into that approach in a subsequent article.</p>

<p>The following errors are potentially recoverable from.</p>

<!-- http://stackoverflow.com/questions/8471577/linux-tcp-connect-failure-with-etimedout -->


<pre><code>[EIO]              An I/O error occurred while reading from the file system.
[ENOBUFS]          An attempt to allocate a memory buffer fails.
[ENOMEM]           Insufficient memory is available.
[ETIMEDOUT]        A transmission timeout occurs during a read attempt on a socket.
</code></pre>

<p>But in reality recovering from them within the context of a read operation is not practical (you need to recover from these operations at a point were resource are controlled or user interaction is possible). So for now we will abort the read operation with an error code (we will revisit this in a later article).</p>

<p>The following error codes means that no more data will be available because the connection has been interrupted.</p>

<!-- http://stackoverflow.com/questions/2974021/what-does-econnreset-mean-in-the-context-of-an-af-local-socket -->


<!-- http://stackoverflow.com/questions/900042/what-causes-the-enotconn-error -->


<pre><code>[ECONNRESET]       The connection is closed by the peer during a read attempt on a socket.
[ENOTCONN]         A read is attempted on an unconnected socket.
</code></pre>

<p>How the application reacts to a broken connection depends on the communication protocol. For the simple protocol defined above we can return any data that has been retrieved from the socket and then indicating to the calling code that we have reached the end of the message (we will revisit this in a later article). This is probably the most iffy decision in handling error codes and returning an error code could be more appropriate but I want to illustrate that we can potentially continue depending on the situation.</p>

<p>The following error codes are recoverable from.</p>

<pre><code>[EAGAIN]           The file was marked for non-blocking I/O, and no data were ready to be read.
</code></pre>

<p>These error codes are generated when you have a non-blocking stream. In a future article we will discuss how to take advantage of non-blocking streams.</p>

<pre><code>[EINTR]            A read from a slow device was interrupted before any data arrived by the delivery of a signal.
</code></pre>

<p>The exact action that you take will depend on your application (like doing some useful work) but for our simple application simply re-trying the read operation will be the standard action. Again we will come back to this, but taking advantage of timeouts will require a slightly more sophisticated approach rather than using the sockets API directly.</p>

<blockquote><p><strong>EINTR:</strong><br/>
An important note about signals. There are a lot of signals that are non leathal and will result in this EINTR error code. But one should note that leathal signals like SIGINT by default will kill the application and thus will not cause this error code (as the call to read() will never return).</p>

<p>But you can override the SIGINT signal handler and a allow your application to continue and at this point your read operation will recieve this error. How your code interacts with signals like SIGINT is beyond the scope of this article and it will be discussed just like other signals.</p></blockquote>

<p>```c getMessage() Improved
/<em>
 * Returns:     0   EOM reached.
 *                  There is no data in the buffer.
 *              >0  Message data has been read.
 *                  If the buffer is full then it is not null terminated.
 *                  If the buffer is partially full then it is null terminated
 *                  and the next call to get getMessage() will return 0.
 *              &lt;0  An error occured.
 </em>/
int getMessage(int socketId, char* buffer, std::ssize_t size)
{</p>

<pre><code>std::ssize_t     dataRead = 0;
std::ssize_t     dataMax  = size - 1;

while(dataRead &lt; dataMax)
{
    ssize_t get = read(socketId, buffer + dataRead, size - dataRead);
    if (get == -1)
    {
        switch(errno)
        {
            case EBADF:
            case EFAULT:
            case EINVAL:
            case ENXIO:
                // Fatal error. Programming bug
                return -3;
            case EIO:
            case ENOBUFS:
            case ENOMEM:
                // Resource aquisition failure or device error
                // Can't recover from here so indicate failure
                // and exit
                return -2;
            case ETIMEDOUT:
            case EAGAIN:
            case EINTR:
                // Temporrary error.
                // Simply retry the read.
                continue;
            case ECONNRESET:
            case ENOTCONN:
                // Connection broken.
                // Return the data we have available and exit
                // as if the connection was closed correctly.
                get = 0;
                break;
            default:
                return -1;
        }
    }
    if (get == 0)
    {
        break;
    }
    dataRead += get;
}
buffer[dataRead] = '\0';
return dataRead;
</code></pre>

<p>}
```</p>

<h2>Write</h2>

<p>The <code>write()</code> has exactly the same scenario as <code>read()</code>.</p>

<p>The following errors are the reuls of programming bugs and should not happen in production.</p>

<pre><code> [EINVAL]           The pointer associated with fildes is negative.
 [EBADF]            fildes is not a valid file descriptor open for writing.
 [ECONNRESET]       A write is attempted on a socket that is not connected.
 [ENXIO]            A request is made of a nonexistent device, or the request is outside the capabilities of the device.
 [EPIPE]            An attempt is made to write to a socket of type SOCK_STREAM that is not connected to a peer socket.
</code></pre>

<p>The following errors are potentially recoverable bugs. Though recovering from them requires some form of awarness of the context that is not provided at the read level. So we must generate an error to stop reading and allow the caller to sort out the problem.</p>

<pre><code> [EDQUOT]           The user's quota of disk blocks on the file system containing the file is exhausted.
 [EFBIG]            An attempt is made to write a file that exceeds the process's file size limit or the maximum file size.
 [EIO]              An I/O error occurs while reading from or writing to the file system.
 [ENETDOWN]         A write is attempted on a socket and the local network interface used to reach the destination is down.
 [ENETUNREACH]      A write is attempted on a socket and no route to the network is present.
 [ENOSPC]           There is no free space remaining on the file system containing the file.
</code></pre>

<p>The following error codes are recoverable from and we covered them above in the section on <code>read()</code>.</p>

<pre><code> [EAGAIN]           The file is marked for non-blocking I/O, and no data could be written immediately.
 [EINTR]            A signal interrupts the write before it could be completed.
</code></pre>

<p>The resulting put function then looks like this.</p>

<p>```c putMessage() Improved
/<em>
 * Returns:
 *              >0  Indicates success and the number of bytes written.
 *              &lt;0  Indicates failure.
 </em>/
int putMessage(int socketId, char* buffer, ssize_t size)
{</p>

<pre><code>ssize_t     dataWritten = 0;

while(dataWritten &lt; size)
{
    ssize_t put = write(socketId, buffer + dataWritten, size - dataWritten);
    if (put == -1)
    {
        switch(errno)
        {
            case EINVAL:
            case EBADF:
            case ECONNRESET:
            case ENXIO:
            case EPIPE:
                // Fatal error. Programming bug
                return -3;
            case EDQUOT:
            case EFBIG:
            case EIO:
            case ENETDOWN:
            case ENETUNREACH:
            case ENOSPC:
                // Resource aquisition failure or device error
                // Can't recover from here so indicate failure
                // and exit
                return -2;
            case EAGAIN:
            case EINTR:
                // Temporrary error.
                // Simply retry the read.
                continue;
            default:
                return -1;
        }
    }
    dataWritten += put;
}
return dataWritten;
</code></pre>

<p>}
```</p>

<h1>Summary</h1>

<p>This article has shown the most important error that people skip over when reading and writing to a socket: <strong>Not all the data was transported at the same time</strong>. The read and write command may only read/write a portion of the data that you wanted to send/receive and thus you must check the amount that actually was sent/received.</p>

<p>The next most important point is that not all error codes are fatal (most people actually check these) <strong>but</strong> an interrupt (EINTR) can be relatively common and you can continue reading after it has happened.</p>

<h1>Inspiration</h1>

<ul>
<li>2015-Jun-25 <a href="http://codereview.stackexchange.com/q/94608/507">Impromptu TCP sender/receiver</a></li>
<li>2015-Jul-03 <a href="http://codereview.stackexchange.com/q/95638/507">Raw Text TCP Client v3</a></li>
<li>2015-Dec-20 <a href="http://codereview.stackexchange.com/q/114551/507">Server / client desynchronisation of messages </a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Socket Programming in C]]></title>
    <link href="http://lokiastari.com/blog/2016/04/08/socket-programming-in-c-version-1/"/>
    <updated>2016-04-08T09:47:01-07:00</updated>
    <id>http://lokiastari.com/blog/2016/04/08/socket-programming-in-c-version-1</id>
    <content type="html"><![CDATA[<p>Building a simple client/server application is the common first internet based applications developers attempt. These applications are built on top of the socket communication library, but socket programming in C++ is not obvious as there are no standard libraries and thus you have to fall back to the C API. The closest &ldquo;standardish&rdquo; sort of thing we have is <a href="http://www.boost.org/doc/libs/1_60_0/doc/html/boost_asio/overview.html">Boost.asio</a> which is at the other end of the spectrum in terms of API and involves a cognitive leap to understand what is happening underneath (or you can just trust the library maintainers). The other alternative is <a href="https://curl.haxx.se/libcurl/c/">libcurl</a>; the &ldquo;easy curl&rdquo; layer is an abstraction of the <code>socket()</code> API, while the &ldquo;multi curl&rdquo; layer is an abstraction of the <code>pselect()</code> API that allows multiple sockets to be handled in a single thread.</p>

<p>I am writing a series of articles that start with a basic C++ client/server application and walk through building a C++ communication library. During this processes I will be using examples from <a href="http://codereview.stackexchange.com">codereview.stackexchange.com</a> to illustrate common mistakes and try to show how to write the code correctly (This will also be a learning exercise for me so please let me know if you spot a mistake).</p>

<p>Currently the plan is to write the following articles:</p>

<!-- Server listening for program sockets -->


<ul>
<li>Client/Server C</li>
<li>Client/Server C Read/Write</li>
<li>Client/Server C++ Wrapper</li>
<li>Mult-Threaded Server</li>
<li>Non-Blocking Socket</li>
<li>Co-Routines</li>
</ul>


<h2>Client/Server C++ Basic Version</h2>

<p>The minimum example of a working Client/Server application in C++:<br/>
The full working version is <a href="https://github.com/Loki-Astari/Examples/tree/master/Version1">here</a></p>

<p>```c   C Server <a href="https://github.com/Loki-Astari/Examples/blob/master/Version1/server.cpp">https://github.com/Loki-Astari/Examples/blob/master/Version1/server.cpp</a> source</p>

<h1>include &lt;netinet/in.h></h1>

<h1>include &lt;errno.h></h1>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;string.h></h1>

<h1>include &lt;unistd.h></h1>

<h1>define SERVER_BUFFER_SIZE      1024</h1>

<p>int main()
{</p>

<pre><code>int socketId = socket(PF_INET, SOCK_STREAM, 0);

struct sockaddr_in serverAddr;
bzero((char*)&amp;serverAddr, sizeof(serverAddr));
serverAddr.sin_family       = AF_INET;
serverAddr.sin_port         = htons(8080);
serverAddr.sin_addr.s_addr  = INADDR_ANY;
bind(socketId, (struct sockaddr *) &amp;serverAddr, sizeof(serverAddr));

listen(socketId, 5);

int                         finished    = 0;
while(!finished)
{
    struct  sockaddr_storage    serverStorage;
    socklen_t                   addr_size   = sizeof serverStorage;
    int newSocket = accept(socketId, (struct sockaddr*)&amp;serverStorage, &amp;addr_size);

    char        buffer[SERVER_BUFFER_SIZE];
    int         get = read(newSocket, buffer, SERVER_BUFFER_SIZE - 1);

    buffer[get] = '\0';
    fprintf(stdout, "%s\n", buffer);

    write(newSocket, "OK", 2);

    fprintf(stdout, "Message Complete\n");

    close(newSocket);
}
close(socketId);
</code></pre>

<p>}
```</p>

<p>```c C Client <a href="https://github.com/Loki-Astari/Examples/blob/master/Version1/client.cpp">https://github.com/Loki-Astari/Examples/blob/master/Version1/client.cpp</a> source</p>

<h1>include &lt;arpa/inet.h></h1>

<h1>include &lt;errno.h></h1>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;string.h></h1>

<h1>include &lt;unistd.h></h1>

<h1>define CLIENT_BUFFER_SIZE     1024</h1>

<p>int main(int argc, char* argv[])
{</p>

<pre><code>if (argc != 3)
{
    fprintf(stderr, "Usage: client &lt;host&gt; &lt;Message&gt;\n");
    exit(1);
}

int socketId = socket(PF_INET, SOCK_STREAM, 0);

struct sockaddr_in serverAddr;
socklen_t addrSize = sizeof(serverAddr);
bzero((char*)&amp;serverAddr, sizeof(serverAddr));
serverAddr.sin_family       = AF_INET;
serverAddr.sin_port         = htons(8080);
serverAddr.sin_addr.s_addr  = inet_addr(argv[1]);
connect(socketId, (struct sockaddr*)&amp;serverAddr, addrSize);

write(socketId, argv[2], strlen(argv[2]));

shutdown(socketId, SHUT_WR);

char    buffer[CLIENT_BUFFER_SIZE];
size_t  get = read(socketId, buffer, CLIENT_BUFFER_SIZE - 1);

buffer[get] = '\0';
fprintf(stdout, "%s %s\n", "Response from server", buffer);

close(socketId);
</code></pre>

<p>}
```</p>

<p>This version of the Client/Server actually works (a lot of the time) but obviously has a couple of major issues.</p>

<h2>Checking Error Codes</h2>

<p>If the calls to <code>socket()</code>, <code>bind()</code>, <code>listen()</code> or <code>connect()</code> fail then we have a catastrophic error any further actions will also fail. A few of the error codes generated by these functions can potentially be recovered from but most are programming error or permission failure as a result a human readable message with application termination is an acceptable solution (at this point).</p>

<p>Note: When these functions don&rsquo;t succeed they set the global variable <code>errno</code> which can be translated into a human readable string with <code>strerror()</code>. So the simplest solution is to generate an appropriate error message for the user and terminate the application.</p>

<p>```c Socket Validation</p>

<pre><code>int socketId = socket(PF_INET, SOCK_STREAM, 0);
if (socketId == -1)
{
    fprintf(stderr, "Failed: socket()\n%s\n", strerror());
    exit(1);
}
</code></pre>

<p>```</p>

<p>```c Bind Validation</p>

<pre><code>if (bind(socketId, (struct sockaddr *) &amp;serverAddr, sizeof(serverAddr)) == -1)
{
    fprintf(stderr, "Failed: bind()\n%s\n", strerror());
    close(socketId);    // Don't forget to close the socket.
    exit(1);
}
</code></pre>

<p>```</p>

<p>```c Listen Validation</p>

<pre><code>if (listen(socketId, 5) == -1)
{
    fprintf(stderr, "Failed: connect()\n%s\n", strerror());
    close(socketId);    // Don't forget to close the socket.
    exit(1);
}
</code></pre>

<p>```</p>

<p>```c Connect Validation</p>

<pre><code>if (connect(socketId, (struct sockaddr*)&amp;serverAddr, addrSize) == -1)
{
    fprintf(stderr, "Failed: connect()\n%s\n", strerror());
    close(socketId);    // Don't forget to close the socket.
    exit(1);
}
</code></pre>

<p>```</p>

<h1>Summary</h1>

<p>The basic socket programs are relatively trivial. But this version 1 has some obvious flaws the major one being checking error states (which a lot of beginners forget in their first version). The next article will look into some more details about read and write operations on the socket.</p>

<h1>Inspiration for Article</h1>

<ul>
<li>2012-Jul-09 <a href="http://codereview.stackexchange.com/q/13461/507">Two-way communication in TCP: server-client implementation</a></li>
<li>2012-Jul-23 <a href="http://codereview.stackexchange.com/q/13933/507">Stupidly simple TCP client/server</a></li>
<li>2013-May-28 <a href="http://codereview.stackexchange.com/q/26683/507">How is this for a “Hello World” of socket programming?</a></li>
<li>2013-Sep-06 <a href="http://codereview.stackexchange.com/q/30852/507">Extract location from HTTP socket</a></li>
<li>2014-Mar-10 <a href="http://codereview.stackexchange.com/q/43914/507">Client/server implementation in C (sending data/files)</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memory Resizing]]></title>
    <link href="http://lokiastari.com/blog/2016/03/25/resizemaths/"/>
    <updated>2016-03-25T05:53:07-07:00</updated>
    <id>http://lokiastari.com/blog/2016/03/25/resizemaths</id>
    <content type="html"><![CDATA[<p>So I never really considered why the resize of vector used a constant expansion of 1.5 or 2 (in some popular implementations). That was until I did my previous article series <a href="/blog/2016/02/27/vector/">&ldquo;Vector&rdquo;</a> where I concentrated a lot on resource management and did a section on <a href="/blog/2016/03/12/vector-resize/">resizing the vector</a>. Originally in the code I tried to be clever, a mistake. I used a resize value of 1.62 (an approximation of <code>Phi</code>), because I vaguely remembered reading an article that this was the optimum resize factor. When I put this out for code review it was pointed out to me that this value was too large, the optimum value must be less than or equal to <code>Phi</code> (1.6180339887) and that exceeding this limit actually made things a lot worse.</p>

<p>So I had to know why&hellip;.</p>

<p>So the theory goes: You have a memory resource of size <code>B</code>. If you resize this resource by a constant factor <code>r</code> by re-allocating a new block then releasing the old block. Then if the value of <code>r</code> is smaller than or equal to <code>Phi</code> you will eventually be able to reuse memory that has previously been released; otherwise the new block of memory being allocated will always be larger than the previously released memory.</p>

<p>So I thought lets try that:<br/>
Test one <code>r &gt; Phi</code>:</p>

<pre><code>B=10
r=2.0

            Sum Memory      Memory      Memory Needed       Difference
             Released     Allocated     Next Iteration
Start            0            10              20                 20
Resize 1        10            20              40                 30
Resize 2        30            40              80                 50
Resize 3        70            80             160                 90
Resize 4       150           160             320                170
</code></pre>

<p>OK. That seems to be holding (at least in the short term). Lo lets try a smaller value.<br/>
Test two <code>r &lt; Phi</code>:</p>

<pre><code>B=10
r=1.5

            Sum Memory      Memory      Memory Needed       Difference
             Released     Allocated     Next Iteration
Start            0            10              15                 15
Resize 1        10            15              22                 12
Resize 2        25            22              33                  8
Resize 3        47            33              48                  1
Resize 4        80            48              72                 -8 // Reuse released memory next iteration
</code></pre>

<p>OK. That also seems to be holding. But can we show that holds for all values of B? Also this is a bit anecdotal can we actually show this relationship actually hold? Time to break out some maths (not math as my American cousins seem to insist on for the shortening of mathematics).</p>

<p>So the size <code>S</code> of any block after <code>n</code> resize operations will be:</p>

<p><p><div class='bogus-wrapper'><notextile></p>

<pre><code>\[ S   = Br^n \]
</code></pre>

<p></notextile></div></p></p>

<p>Thus the size of <code>Released Memory</code> can be expressed as:</p>

<p><p><div class='bogus-wrapper'><notextile></p>

<pre><code>\[ \sum_{k=0}^{n-1}\ Br^k \]
</code></pre>

<p></notextile></div></p></p>

<p>Also the size of the next block will be:</p>

<p><p><div class='bogus-wrapper'><notextile></p>

<pre><code>\[ Br^{n+1} \]
</code></pre>

<p></notextile></div></p></p>

<p>So if the amount of <code>Released Memory</code> >= the amount required for the next block, then we can reuse the <code>Released Memory</code>.</p>

<p><p><div class='bogus-wrapper'><notextile></p>

<pre><code>\[ \sum_{k=0}^{n-1}\ Br^k &amp;gt;= Br^{n+1} \]

\[ B \sum_{k=0}^{n-1}\ r^k &amp;gt;= Br^{n+1} \]

\[ \sum_{k=0}^{n-1}\ r^k &amp;gt;= r^{n+1} \]

\[ {1-r^{(n-1)+1}\over1-r} &amp;gt;= r^{n+1} \]

\[ {1-r^n\over1-r} &amp;gt;= r^{n+1} \]

\[ 1-r^n &amp;gt;= r^{n+1} (1-r) \]

\[ 1-r^n &amp;gt;= r^{n+1} - r^{n+2} \]

\[ 1 + r^{n+2} - r^{n+1} - r^n &amp;gt;= 0 \]

\[ 1 + r^n (r^2 - r - 1) &amp;gt;= 0 \]
</code></pre>

<p></notextile></div></p></p>

<p>This is were my maths broke down and I had to plot some graphs (my old &ldquo;maths&rdquo; teacher would have been so proud).<br></p>

<p><img src="/images/Root4.png" width="400" height="200" title="&ldquo;n=4&rdquo;" >
<img src="/images/Root8.png" width="400" height="200" title="&ldquo;n=8&rdquo;" ></p>

<br><br>


<p>So after looking at the graphs (to undrestand the formula) then talking to some smart people.<br/>
They noticed that:
<p><div class='bogus-wrapper'><notextile></p>

<pre><code>\[ (r^2 - r - 1) root . when . r = \Phi \]
</code></pre>

<p></notextile></div></p></p>

<p>We find that the first root of the equation is 1. The second root of the equation depends on <code>n</code>, as <code>n</code> tends to <code>infinity</code> the other root tends towards <code>Phi</code>. From this we can infer the following:</p>

<p><p><div class='bogus-wrapper'><notextile></p>

<pre><code>\[
    1 &amp;lt; r &amp;lt= \Phi
\]
</code></pre>

<p></notextile></div></p></p>

<p>Thus if <code>r</code> remains in the above range then the above theory holds.</p>
]]></content>
  </entry>
  
</feed>
